#created on: 2014-5-26
package com.ibm.its.df.test

import com.rating.hour.RatingRuleTest.Transaction;
import com.rating.hour.RatingRuleTest.Statistic;
import java.util.*;

#list any import classes here.

declare Transaction 
 @role( event ) 
 @timestamp(txTime)
 #@duration(endTxTime)
end

declare Statistic 
 @role( fact ) 
end

rule 'default rule'
	when
		#conditions
	then 
		#actions
		System.out.println("default flow");
end

rule 'collect out of hour rule'
	salience 50
	when
		#conditions
		$tran: Transaction($lpn: lpn, $curTxTime: txTime, isActive == true)
		$activeTrans: ArrayList(size > 0) from collect( Transaction(lpn == $lpn, isActive == true, txTime before[120m] $curTxTime) ) 
	then 
		#actions
		for(Object obj : $activeTrans){
			Transaction transaction = (Transaction)obj;
			transaction.setIsActive(false);
			retract(transaction);
		}
		System.out.println("set inactive");
end

rule 'collect in hour rule'
	salience 30
	when
		#conditions
		$tran: Transaction($lpn: lpn, $curTxTime: txTime, isActive == true)
		#$trans: ArrayList(size > 0 ) from collect( Transaction(lpn == $lpn) over window:time( 1h ) ) 
		#$trans: ArrayList(size > 0 ) from collect( Transaction(lpn == $lpn, detnPoint in ('A', 'B', 'C', 'D', 'E', 'F'), isActive == true) over window:time( 1h ) ) 
		$trans: ArrayList(size > 0 ) from collect( Transaction(lpn == $lpn, detnPoint in ('A', 'B', 'C', 'D', 'E', 'F'), isActive == true, txTime before[0s, 1h] $curTxTime)) 
		$stat: Statistic(detnPointsStr matches '.*BCD.*') from accumulate ( $t:Transaction($detnPoint: detnPoint) from $trans, 
					init(Statistic stat = new Statistic();), 
					action(stat.getDetnPoints().add($detnPoint);),
					result(stat)
		)
	then 
		#actions
		System.out.println("yahoo");
		System.out.println($stat);
end

